@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using RaidGroupFinder.Data.Model
@using System.Text.RegularExpressions
@using RaidGroupFinder.Data
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DbService DbService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager

<h5 class="ui center aligned header text-white">
    Pokemon GO Remote Raid Finder<br />
    Find players to do remote raids with!<br />
</h5>
<div class="two ui buttons">
    <button class="ui orange button" @onclick="RaidRoom">Host a Raid</button>
    <button class="ui btn-primary button" @onclick="TrainerList">Tainer Codes List</button>
</div>
<div class="ui stackable two column grid">
    <div class="column text-white">
        <h3 class="margin-top-13"> Active Raids</h3>
        @if (RaidBattles != null)
        {
            for (int i =RaidBattles.Count-1; i >=0; i--)
            {
                string iconPath;
                if (RaidBattles[i].Raid.Pokemon.Form == "normal")
                {
                    iconPath = $"/icons/pokemon64x64/{RaidBattles[i].Raid.Pokemon.Number}.png";
                }
                else
                {
                    iconPath = $"/icons/pokemon64x64/{RaidBattles[i].Raid.Pokemon.Name}-{RaidBattles[i].Raid.Pokemon.Form}.png";
                }
                <RaidCard RaidBattle="@RaidBattles[i]" IconPath="@iconPath" OffSet="@Offset" Active="true"></RaidCard>
            }
        }
    </div>
    <div class="column text-white">
        <h3 class="margin-top-13"> Last Raids</h3>
        @if (LastRaidBattles != null)
        {
            foreach (var rb in LastRaidBattles)
            {
                string iconPath;
                if (rb.Raid.Pokemon.Form == "normal")
                {
                    iconPath = $"/icons/pokemon64x64/{rb.Raid.Pokemon.Number}.png";
                }
                else
                {
                    iconPath = $"/icons/pokemon64x64/{rb.Raid.Pokemon.Name}-{rb.Raid.Pokemon.Form}.png";
                }
                <RaidCard RaidBattle="@rb" IconPath="@iconPath" OffSet="@Offset" Active="false"></RaidCard>
            }
        }
    </div>
</div>
<Footer></Footer>

@code{
    private List<RaidBattle> RaidBattles;
    private List<RaidBattle> LastRaidBattles;
    private TimeSpan Offset;
    private HubConnection hubConnection;

    public void RaidRoom()
    {
        NavigationManager.NavigateTo("/create-raid");
    }

    public void TrainerList()
    {
        NavigationManager.NavigateTo("/trainer-codes-list");
    }

    protected override async Task OnInitializedAsync()
    {
        RaidBattles = await DbService.GetActiveRaidBattles();
        LastRaidBattles = await DbService.GetLastInactiveRaidBattles();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/raidhub"))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();
        hubConnection.On<RaidBattle>("ReceiveMessage", (raid) =>
        {
            RaidBattles.Add(raid);
            StateHasChanged();
        });

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            StateHasChanged();
            return;
        }
        string id = user.Claims.Where(p => p.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Select(p => p.Value).FirstOrDefault();
        ApplicationUser currentUser = await UserManager.GetUserAsync(user);
        Offset = TimeZoneInfo.FindSystemTimeZoneById(currentUser.TimeZone).BaseUtcOffset;
        StateHasChanged();
    }
}