@page "/raid/{Room:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using RaidGroupFinder.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DbService DbService
@implements IDisposable

<AuthorizeView>
    <NotAuthorized>
        <h2 class="text-white">You need to <a href="Identity/Account/Login">Login</a> first</h2>
    </NotAuthorized>
    <Authorized>
        <div class="ui minimal comments" id="chat">
            @if (Messages != null)
            {
                @for(int i = Messages.Count -1; i >= 0; i--)
                {
                    var color = UserColor.GetValueOrDefault(Messages[i].User);
                    <div class="comment">
                        <div class="content">
                            <div class="d-inline author" style="color:@color"> @Messages[i].User</div>
                            <div class="metadata">
                                <span class="date text-white-50">@Messages[i].Date.DateTime</span>
                            </div>
                            <div class="text text-white">
                                @Messages[i].Message
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="form-group fit d-flex" context="Another">
            <input class="form-control" type="text" placeholder="Coordinate the raid" @bind="@Message" @onkeyup="OnEnter">
            <button type="submit" class="btn btn-primary" disabled="@(!IsConnected)" @onclick="Send">Send</button>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Room { get; set; }

    private HubConnection HubConnection;
    private List<ChatHistory> Messages = new List<ChatHistory>();
    private string Message;
    private string User;
    private Dictionary<string, string> UserColor = new Dictionary<string, string>();
    private Random Random = new Random();

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        await HubConnection.StartAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }
        string id = user.Claims.Where(p => p.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Select(p => p.Value).FirstOrDefault();
        ApplicationUser currentUser = await UserManager.GetUserAsync(user);
        User = $"{ currentUser.PokemonGoNickname} | {currentUser.TrainerCode}";
        UserColor.Add("BOT", "#00FF00");

        var offset = TimeZoneInfo.FindSystemTimeZoneById(currentUser.TimeZone).BaseUtcOffset;

        HubConnection.On<ChatHistory>("ReceiveMessage", (chat) =>
        {
            SetColor(chat);
            chat.Date = chat.Date.ToOffset(offset);
            Messages.Add(chat);
            base.StateHasChanged();
        });

        Messages = await DbService.GetGroupHistory(Room);

        foreach (var message in Messages)
        {
            message.Date = message.Date.ToOffset(offset); ;
            SetColor(message);
        }

        await HubConnection.SendAsync("SendMessage", User, Message, Room, id);
    }

    protected void SetColor(ChatHistory chat)
    {
        if (chat.User != "BOT")
        {
            try
            {
                UserColor.Add(chat.User, $"#{Convert.ToString(Random.Next(122) + 123, 16)}{Convert.ToString(Random.Next(122) + 123, 16)}{Convert.ToString(Random.Next(122) + 123, 16)}");
            }
            catch { }
        }
    }

    protected void OnEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            Send();
        }
    }

    protected void Send()
    {
        HubConnection.SendAsync("SendMessage", User, Message, Room, null);
        Message = "";
        base.StateHasChanged();
    }

    public bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = HubConnection.DisposeAsync();
    }
}