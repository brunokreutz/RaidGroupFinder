@page "/raid/{Room:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using RaidGroupFinder.Data
@using RaidGroupFinder.Data.Model
@using System.ComponentModel.DataAnnotations;
@using Helper;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DbService DbService
@implements IDisposable

<div class="ui minimal comments" id="chat">
    @if (Messages != null)
    {
        @for (int i = Messages.Count - 1; i >= 0; i--)
        {
            <div class="comment">
                <div class="content">
                    @if (Messages[i].User == null)
                    {
                        <div class="text" style="color:yellow">
                            @Messages[i].Date.DateTime : @Messages[i].Message
                        </div>
                    }
                    else
                    {
                        var color = UserColor.GetValueOrDefault(Messages[i].User);
                        <div class="d-inline author" style="color:@color"> @Messages[i].User</div>
                        <div class="metadata">
                            <span class="date text-white-50">@Messages[i].Date.DateTime</span>
                        </div>
                        <div class="text text-white">
                            @Messages[i].Message
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>
<div class="form-group fit d-flex" context="Another">
    <input class="form-control" type="text" placeholder="Coordinate the raid" @bind="@Message" @onkeyup="OnEnter">
    <button type="submit" class="btn btn-primary" disabled="@(!IsConnected)" @onclick="Send">Send</button>
</div>
<div class="container" style="padding:0; position:absolute; top:0;">
    <div class="one ui buttons" style="display:flex">
        <button class="ui teal button" style="text-align:center" disabled="@Disabled" @onclick="Finish">Finish Raid</button>
    </div>
</div>

<div class="bm-container @ModalActive">
    <div class="bm-overlay"></div> 
    <div class="blazor-modal">
        <div class="bm-header">
            <h3 class="bm-title">Add your Trainer Info to join the room</h3>
        </div>
        <div class="bm-content">
            <EditForm Model="@Input" OnValidSubmit="@SubmitForm" class="simple-form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="last-name">PokemonGo Nickname</label>
                    <input @bind="Input.PokemonGoNickname" type="text" class="form-control border-bottom-10" />
                    <label for="first-name">Trainer Code</label>
                    <input @bind="Input.TrainerCode" type="text" class="form-control border-bottom-10" />
                    <label>Save my Information </label>
                    <InputCheckbox @bind-Value="Input.SaveInfo"></InputCheckbox>
                </div>
                <button class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>

</div>



@code {
    [Parameter]
    public Guid Room { get; set; }

    private HubConnection HubConnection;
    private List<ChatHistory> Messages = new List<ChatHistory>();
    private string Message;
    private string User;
    private Dictionary<string, string> UserColor = new Dictionary<string, string>();
    private Random Random = new Random();
    private bool Disabled = true;
    private RaidBattle RaidBattle;
    private string id;
    private string ModalActive = "";
    private InputModel Input = new InputModel();

    public class InputModel
    {
        [Required]
        [StringLength(15, ErrorMessage = "Nickname is Too Long")]
        public string PokemonGoNickname { get; set; }
        [Required]
        [RegularExpression("[0-9]{4}[ ][0-9]{4}[ ][0-9]{4}|[0-9]{12}", ErrorMessage = "Invalid Trainer Code!")]
        public string TrainerCode { get; set; }
        public bool SaveInfo { get; set; }
    }

    public void CloseModal()
    {
        ModalActive = "";
        StateHasChanged();
    }

    public async Task SubmitForm()
    {
        ModalActive = "";
        id = RegexHelper.ReplaceWhitespace(Input.TrainerCode);
        User = EncodeHelper.CreateTrainerTitle(Input.PokemonGoNickname,id);
        await HubConnection.SendAsync("SendMessage", User, Message, Room, id, false);
        if (RaidBattle.HostUserId == id)
        {
            Disabled = false;
        }
        if (Input.SaveInfo)
        {
            await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie", EncodeHelper.EncodeTo64(User), 365);
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        await HubConnection.StartAsync();

        //var offset = TimeZoneInfo.FindSystemTimeZoneById(currentUser.TimeZone).BaseUtcOffset;

        HubConnection.On<ChatHistory>("ReceiveMessage", (chat) =>
        {
            SetColor(chat);
            //chat.Date = chat.Date.ToOffset(offset);
            Messages.Add(chat);
            base.StateHasChanged();
        });

        Messages = await DbService.GetGroupHistory(Room);

        foreach (var message in Messages)
        {
            //message.Date = message.Date.ToOffset(offset); ;
            SetColor(message);
        }

        RaidBattle = await DbService.GetRaidBattle(Room);
        var cookie = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookie");
        if (cookie != "" && cookie != null)
        {
            (User, id) = EncodeHelper.DismemberTrainerTitle(EncodeHelper.DecodeFrom64(cookie));
            ModalActive = "";
            if (RaidBattle.HostUserId == id)
            {
                Disabled = false;
            }
            await HubConnection.SendAsync("SendMessage", User, Message, Room, id, false);
            StateHasChanged();
        }
        else
        {
            ModalActive = "bm-active";
            StateHasChanged();
        }
    }

    protected void SetColor(ChatHistory chat)
    {
        if (chat.User != null)
        {
            try
            {
                UserColor.Add(chat.User, $"#{Convert.ToString(Random.Next(122) + 123, 16)}{Convert.ToString(Random.Next(122) + 123, 16)}{Convert.ToString(Random.Next(122) + 123, 16)}");
            }
            catch { }
        }
    }

    protected void OnEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            Send();
        }
    }

    protected void Send()
    {
        HubConnection.SendAsync("SendMessage", User, Message, Room, null, false);
        Message = "";
        base.StateHasChanged();
    }

    protected async void Finish()
    {
        if (RaidBattle.HostUserId == id)
        {
            await DbService.FinishRaid(RaidBattle);
        }
        await HubConnection.SendAsync("SendMessage", User, Message, Room, id, true);
        NavigationManager.NavigateTo("/");
    }

    public bool IsConnected => HubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = HubConnection.DisposeAsync();
    }
}