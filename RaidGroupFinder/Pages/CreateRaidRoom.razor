@page "/create-raid"
@using Microsoft.AspNetCore.SignalR.Client
@using RaidGroupFinder.Data
@using RaidGroupFinder.Data.Model
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.Rendering;
@using System.ComponentModel.DataAnnotations;
@using Helper
@*@inject AuthenticationStateProvider AuthenticationStateProvider*@
@*@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager;*@
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DbService DbService
@*<AuthorizeView>
    <NotAuthorized>
<h2 class="text-white">You need to <a href="Identity/Account/Login">Login</a> first</h2>
</NotAuthorized>
    <Authorized >*@
<h2 class="text-white">Create Raid Room</h2>
<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <EditForm Context="EditContext" Model="@Input" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group text-white">
                <label>Pokemon</label>
                <InputSelect class="custom-select border-bottom-10" @bind-Value="Input.Pokemon">
                    <option value="">Select</option>
                    @if (Raids != null)
                    {
                        @foreach (var option in Raids)
                        {
                            <option value="@option.Id.ToString()">
                                @option.Pokemon.Name
                            </option>
                        }
                    }
                </InputSelect>
                <label>Hatchs</label>
                <input type="datetime-local" class="form-control border-bottom-10" @bind="Input.Hatched">
                <label>Pokemon Go Nickname</label>
                <input type="text" maxlength="15" class="form-control border-bottom-10" @bind="Input.PokemonGoNickname" />
                <label> Trainer Code </label>
                <input type="text" maxlength="14" class="form-control border-bottom-10" @bind="Input.TrainerCode" />
                @*<label>Location (Optional)</label>
                <input type="text" maxlength="50" class="form-control border-bottom-10" @bind="Input.Location">*@
                <button class="ui button btn-primary">Create Raid</button>
            </div>
        </EditForm>

    </div>
</div>
@*</Authorized>
    </AuthorizeView>*@

@code {
    private List<Raid> Raids;
    private InputModel Input = new InputModel();
    //private ApplicationUser CurrentUser;
    private TimeSpan Offset;
    private HubConnection hubConnection;

    public class InputModel
    {
        public DateTime Hatched { get; set; }
        [Required]
        public string Pokemon { get; set; }
        //[StringLength(50, ErrorMessage = "Location is Too Long")]
        //public string Location { get; set; }
        [Required]
        [StringLength(15, ErrorMessage = "Nickname is Too Long")]
        public string PokemonGoNickname { get; set; }
        [Required]
        [RegularExpression("[0-9]{4}[ ][0-9]{4}[ ][0-9]{4}|[0-9]{12}", ErrorMessage = "Invalid Trainer Code!")]
        public string TrainerCode { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState.User;

        //if (!user.Identity.IsAuthenticated)
        //{
        //    return;
        //}

        //CurrentUser = await UserManager.GetUserAsync(user);
        //Offset = TimeZoneInfo.FindSystemTimeZoneById(CurrentUser.TimeZone).BaseUtcOffset;
        Input.Hatched = DateTime.UtcNow.Add(Offset);
        Input.Hatched = Input.Hatched.AddSeconds(-Input.Hatched.Second);
        Raids = await DbService.GetActiveRaids();
        StateHasChanged();
    }

    protected async Task HandleValidSubmit()
    {
        Input.TrainerCode = RegexHelper.ReplaceWhitespace(Input.TrainerCode);
        Guid guid = Guid.NewGuid();
        var raidBattle = new RaidBattle()
        {
            Hatched = Input.Hatched.Subtract(Offset), Guid = guid,
            //Host = CurrentUser.PokemonGoNickname,
            Host = Input.PokemonGoNickname,
            Created = DateTime.UtcNow,
            //HostUserId = CurrentUser.Id,
            HostUserId = Input.TrainerCode,
            //Location = Input.Location ?? CurrentUser.TimeZone,
            Location = "",
            Active = true,
            Raid = Raids.FirstOrDefault(p => p.Id.ToString() == Input.Pokemon)
        };
        await DbService.CreateRaidBattle(raidBattle);

        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/raidhub"))
           .WithAutomaticReconnect()
           .Build();

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("SendMessage", raidBattle);

        NavigationManager.NavigateTo($"raid/{guid}");
    }
}